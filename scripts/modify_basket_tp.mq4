//|-----------------------------------------------------------------------------------------|
//|                                                                    modify_basket_tp.mq4 |
//|                                                            Copyright © 2012, Dennis Lee |
//| Assert History                                                                          |
//| 1.20    Modifies ALL trades in a basket (prompts user before each trade modification).  |
//|            Added extern StopLossPip to overwrite existing OrderStopLoss.                |
//| 1.10    Added extern ExtraPip to add pips to TargetPrice. Include PlusInit.             |
//| 1.00    Generated by EX4 TO MQ4 decompile service.                                      |
//|-----------------------------------------------------------------------------------------|
#property copyright "Copyright © 2012, Dennis Lee"
#property link      ""
#property show_inputs

#include <WinUser32.mqh>
#include <stderror.mqh>
#include <stdlib.mqh>

//|-----------------------------------------------------------------------------------------|
//|                           E X T E R N A L   V A R I A B L E S                           |
//|-----------------------------------------------------------------------------------------|
extern int     Magic       = 0;
extern string  s1_1        = "Direction: 0-Buy, 1-Sell";
extern int     Direction   = 0;
extern double  TargetPrice = 0.0;
extern int     ExtraPip    = 0;
extern int     StopLossPip = 0;

//|-----------------------------------------------------------------------------------------|
//|                           E X T E R N A L   V A R I A B L E S                           |
//|-----------------------------------------------------------------------------------------|
string EaName  = "modify_basket_tp";
string EaVer   = "1.20";
#include    <PlusInit.mqh>

//|-----------------------------------------------------------------------------------------|
//|                             I N I T I A L I Z A T I O N                                 |
//|-----------------------------------------------------------------------------------------|
int init()
{
   InitInit();
   return(0);
}

//|-----------------------------------------------------------------------------------------|
//|                               M A I N   P R O C E D U R E                               |
//|-----------------------------------------------------------------------------------------|
int start() {
   int ticket = GetTicket(Magic, Direction, 0);
   if (!OrderSelect(ticket, SELECT_BY_TICKET)) {
      Print("No orders open for this pair");
      return (0);
   }
   int li_4 = MarketInfo(OrderSymbol(), MODE_DIGITS);
   double TP = CalcTP(Magic, Direction, TargetPrice);
//--- Assert add pips to TP (on top of TargetPrice)
   if( ExtraPip > 0 )
   {
      if( Direction == 0 ) TP += ExtraPip * InitPts;
      if( Direction == 1 ) TP -= ExtraPip * InitPts;
   }
   double profit = CalcProfit(Magic, Direction, TP);
   string ls_24 = "buy";
   if (Direction == 1) ls_24 = "sell";
   OrderSelect(ticket, SELECT_BY_TICKET);
   double ld_36 = MarketInfo(OrderSymbol(), MODE_POINT);
   double SL = OrderStopLoss();
//--- Assert StopLossPip overwrites SL
   if( StopLossPip > 0 )
   {
      double calcSL;
      if( Direction == 0 )
      {
         calcSL = OrderOpenPrice() - StopLossPip * InitPts;
         if( SL==0 || calcSL < SL ) SL = calcSL;
      }
      if( Direction == 1 )
      {
         calcSL = OrderOpenPrice() + StopLossPip * InitPts;
         if( SL==0 || calcSL > SL ) SL = calcSL;
      }
   }
   if (MathMod(SL / ld_36, 2) == 0.0) SL += ld_36;
   else SL -= ld_36;
//--- Assert modify ALL trades in basket.
   int total = OrdersTotal();
   for( int i=0; i<total; i++ )
   {
      if( OrderSelect(i, SELECT_BY_POS) )
      {
      //--- Assert continue if trade is not in basket.
         if( !(OrderType()==Direction && OrderMagicNumber()==Magic) ) continue;
         
         int li_32 = MessageBox("Will modify pair " + Magic + " " + OrderSymbol() + " (" + ls_24 + ") order " + OrderTicket() 
            + "\nT/P to " + DoubleToStr(TP, li_4) + " and SL to " + DoubleToStr(SL, li_4)
            + " which will result in " + DoubleToStr(profit, 2) + " profit. \nContinue?", EaName+" "+EaVer, MB_YESNO|MB_ICONQUESTION);
         if (li_32 == IDNO) continue;
         Print("Modifying...");
         if( !OrderModify(OrderTicket(), OrderOpenPrice(), SL, TP, 0, CLR_NONE) )
         {
            int err = GetLastError();
            Print("Error in modify: #", err, " - ", ErrorDescription(err));
         }
         else Print("success!");
      }
   }
   return (1);
}

//|-----------------------------------------------------------------------------------------|
//|                           I N T E R N A L   F U N C T I O N S                           |
//|-----------------------------------------------------------------------------------------|
//--- Assert return ticket of the first order by type and magic no.
int GetTicket(int mgc, int type, bool ai_8) {
   int li_12;
   int li_20 = OrdersTotal();
   for (int li_16 = 0; li_16 < li_20; li_16++) {
      if (OrderSelect(li_16, SELECT_BY_POS)) {
         if (type == OrderType()) {
            if (OrderMagicNumber() == mgc) {
               li_12 = OrderTicket();
               if (ai_8) return (li_12);
            }
         }
      }
   }
   return (li_12);
}

//--- Assert calculated take profit level 
double CalcTP(int mgc, int type, double targetPrice) {
   double ld_32;
   double ld_40;
   double ld_48;
   int li_28 = OrdersTotal();
   int li_24 = GetTicket(mgc, type, 0);
   if (OrderSelect(li_24, SELECT_BY_TICKET)) {
      ld_32 = OrderOpenPrice();
      ld_40 = -1;
      ld_48 = MarketInfo(OrderSymbol(), MODE_POINT);
      while (ld_40 <= targetPrice) {
         if (type == OP_BUY) ld_32 += ld_48;
         else ld_32 -= ld_48;
         ld_40 = 0;
         for (int li_20 = 0; li_20 < li_28; li_20++) {
            if (OrderSelect(li_20, SELECT_BY_POS)) {
               if (type == OrderType())
                  if (OrderMagicNumber() == mgc) ld_40 += f0_1(OrderLots(), OrderOpenPrice(), ld_32, type, OrderSymbol()) + OrderCommission() + OrderSwap();
            }
         }
      }
   }
   return (ld_32);
}

double f0_1(double lot, double openPrice, double ad_16, int type, string sym) {
   double ld_36 = MarketInfo(sym, MODE_TICKVALUE) / MarketInfo(sym, MODE_TICKSIZE);
   if (type == 0) return (ld_36 * lot * (ad_16 - openPrice));
   if (type == 1) return (ld_36 * lot * (openPrice - ad_16));
   return (0);
}

double CalcProfit(int mgc, int type, double takeProfit) {
   int li_28 = OrdersTotal();
   double ld_32 = 0;
   for (int li_20 = 0; li_20 < li_28; li_20++) {
      if (OrderSelect(li_20, SELECT_BY_POS)) {
         if (type == OrderType())
            if (OrderMagicNumber() == mgc) ld_32 += f0_1(OrderLots(), OrderOpenPrice(), takeProfit, type, OrderSymbol()) + OrderCommission() + OrderSwap();
      }
   }
   return (ld_32);
}

//|-----------------------------------------------------------------------------------------|
//|                                 E N D   O F   S C R I P T                               |
//|-----------------------------------------------------------------------------------------|